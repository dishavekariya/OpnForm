name: OpnForm CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  check-user:
    if: github.actor == 'dishavekariya' || github.actor == 'trusted-user'
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{secrets.DOCKERHUB_ACCESS_TOKEN}}

  laravel-php-tests:
    name: Laravel Backend (PHP + PostgreSQL)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: opnform_test
          POSTGRES_USER: opnform
          POSTGRES_PASSWORD: ${{ secrets.POSTGRESS_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U opnform"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Install Composer dependencies
        working-directory: ./api
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      # - name: Copy .env and generate key
      #   working-directory: ./api
      #   run: |
      #     cp .env.example .env
      #     php artisan key:generate

      - name: Run migrations
        working-directory: ./api
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: opnform_test
          DB_USERNAME: opnform
          DB_PASSWORD: ${{ secrets.POSTGRESS_PASSWORD }}
        run: php artisan migrate --force
    
      - name: Directory permissions
        working-directory: ./api
        run: chmod -R 777 storage bootstrap/cache

      - name: Run Pest tests
        working-directory: ./api
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: opnform_test
          DB_USERNAME: opnform
          DB_PASSWORD: ${{ secrets.POSTGRESS_PASSWORD }}
        run: ./vendor/bin/pest -p --colors

      - name: Run PHP lint check
        working-directory: ./api
        run: ./vendor/bin/pint --test


  nuxt-client-tests:
    name: Nuxt Frontend (Node.js)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Run ESLint
        working-directory: ./client
        run: npm run lint

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Run client tests (if any)
        working-directory: ./client
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No client tests defined."
          fi

  image-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [nuxt-client-tests, laravel-php-tests]
  
    steps:
      - uses: actions/checkout@v4
  
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
  
      # --- Generate tag for API image ---
      - name: Generate API Docker tag
        id: api_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/opnform-api
          tags: |
            type=raw,{{branch}}-{{sha}}-{{date 'X'}}
  
      # --- Build and push API Docker image ---
      - name: Build and Push API Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.api
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.api_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
      # --- Generate tag for Client UI image ---
      - name: Generate UI Docker tag
        id: ui_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/opnform-ui
          tags: |
            type=raw,{{branch}}-{{sha}}-{{date 'X'}}
  
      # --- Build and push Client UI Docker image ---
      - name: Build and Push UI Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.client
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.ui_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
